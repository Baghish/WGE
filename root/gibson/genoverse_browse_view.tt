[% META title="Browse Crisprs" %]
<div class="page-header">
  <h1>[%- genes -%]
  <small>[% IF design_id %]design: <strong>[%design_id%]</strong>[% END %]
  chr: [%- chromosome -%]
  assembly: [%- genome -%]</small>
  <a id="go_to_filters" class="btn btn-default pull-right">Show Options and Filters <i class="icon-chevron-down"></i></a><br>
  <a id="reload_tracks" class="btn btn-default pull-right">Reload Tracks <i class="icon-refresh"></i></a>
  </h1>
</div>

<div class="container-fluid">
<div class="alert alert-info"><strong>Zoom:</strong> use "+" and "-" buttons. <strong>Move:</strong> drag or scroll with the mouse. <strong>Select region:</strong> hold shift key and drag with the mouse.
  <a href="[% c.uri_for('/crispr_help') _ '#genoverse_view' %]" target="_blank">
    <i class="icon-question-sign"></i>Help
  </a>
  <button type="button" class="close" data-dismiss="alert">×</button>
</div>
<div id="genoverse" style="margin: 0;" class="span12"></div>

<div class="row-fluid">
  <div class="well" id="silent_mutations" style="display:none"></div>
</div>

<div class="row-fluid">
<div class="span9">
<form action="[% c.uri_for( '/genoverse_browse' ) %]" class="well">
  <input type="hidden" name="genome" value=[%genome%] />
  <input type="hidden" name="chromosome" value=[%chromosome%] />
  <input id="browse_start" type="hidden" name="browse_start" value=[%browse_start%] />
  <input id="browse_end" type="hidden" name="browse_end" value=[%browse_end%] />
  <input type="hidden" name="genes" value="[%genes%]" />
  [% IF design_id %]<input type="hidden" name="design_id" value=[%design_id%] />[% END %]

  <table class='table'>
   <thead>
    <tr>
     <th>Single Crisprs</th><th>Paired Crisprs</th><th>Designs</th>
     <th><p id="crispr_filters_heading" [% UNLESS view_single OR view_paired %]class="muted"[% END %]>Crispr Filters</p></th>
     <th><p id="spacer_filters_heading" [% UNLESS view_paired %]class="muted"[% END %]>Spacer Filter</p></th>
    </tr>
   </thead>
   <tbody>
    <tr>
      <td>
        <input id="show_single" type="radio" name="view_single" value="1" [% IF view_single %]checked[% END %]>
        Show</input>
        <br />
        <input id="hide_single" type="radio" name="view_single" value="0"  [% IF not view_single %]checked[% END %]>
        Hide</input>
      </td>
      <td>
        <input id="show_paired" type="radio" name="view_paired" value="1" [% IF view_paired %]checked[% END %]>
        Show</input>
        <br />
        <input id="hide_paired" type="radio" name="view_paired" value="0" [% IF not view_paired %]checked[% END %]>
        Hide</input>
      </td>
      <td>
        <input id="show_designs" type="radio" name="view_designs" value="1" checked>
        Show</input>
        <br />
        <input id="hide_designs" type="radio" name="view_designs" value="0" >
        Hide</input>
      </td>
      <td>
       <fieldset name="crispr_filters" [% UNLESS view_paired OR view_single %]disabled[% END %]>
        <input type="radio" name="crispr_filter" value="all" [% IF crispr_filter == 'all'  or not crispr_filter %]checked[% END %]>
        Show All</input>
        <br />
        <input type="radio" name="crispr_filter" value="exonic" [% IF crispr_filter == 'exonic' %]checked[% END %]>
        Exon Only</input>
        <br />
        <input type="radio" name="crispr_filter" value="exon_flanking" [% IF crispr_filter == 'exon_flanking' %]checked[% END %]>
        Exon Flanking Only</input>
        <br />
        Flanking region: <br/><input type="number" id="flank_size" name="flank_size" value="[% flank_size OR 100 %]" min="1" max="1000" style="width: 60px"/>
       </fieldset>
      </td>
      <td>
       <fieldset name="spacer_filters" [% UNLESS view_paired %]disabled[% END %]>
         Crispr Pair Spacer Length<br/>(-10 to 30 bp)<br />
         Min Spacer Length <input type="number" name="spacer_min" id="spacer_min" min="-10" max="30" step="1" style="width: 60px"></input> bp<br />
         Max Spacer Length <input type="number" name="spacer_max" id="spacer_max" min="-10" max="30" step="1" style="width: 60px"></input> bp<br />
         <button type="button" class="btn btn-default btn-mini" id="reset_spacer_filters">Reset</button>
         <button type="button" class="btn btn-primary btn-small" id="apply_spacer_filters">Apply Spacer Filter</button>
       </fieldset>
      </td>
    </tr>

    <th>Variation</th>
    <tr>
        <td>
            MAF threshold <input type="text" id="MAF_threshold" name="MAF_threshold" value="0.005" style="width: 60px"> <br/> 
            </input>
            <button type="button" class="btn btn-primary btn-small" id="apply_MAF_threshold">Apply MAF filter</button>
        </td>
    </tr>
  </tbody>
  </table>
  <a href="[% c.uri_for('/crispr_help') _ '#basic_filters' %]" target="_blank" class="pull-right">
    <i class="icon-question-sign"></i>Help
  </a>
</form>
<div class="well">
 <table><tr>
 <td style="padding-right: 20px;">
  <strong>Crispr Colour Key:</strong><br>
  <div style="background: [%colours.left_crispr%]; width: 20px; height: 20px; float: left"></div>
  <div style="margin-left: 30px">Off-targets computed</div>

  <div style="background: [%colours.no_ot_summary%]; width: 20px; height: 20px; float: left"></div>
  <div style="margin-left: 30px">Off-targets not computed</div>

  <div style="background: [%colours.pam%]; width: 10px; height: 20px; float: left"></div>
  <div style="margin-left: 30px">PAM site</div>

 </td>
 <td>
  <strong>Crispr Pair Colour Key:</strong><br>
  <div style="background: [%colours.left_crispr%]; width: 20px; height: 20px; float: left"></div>
  <div style="background: [%colours.right_crispr%]; width: 20px; height: 20px; float: left"></div>
  <div style="margin-left: 50px">Left and right off-targets computed</div>

  <div style="background: [%colours.no_ot_summary%]; width: 20px; height: 20px; float: left"></div>
  <div style="background: [%colours.no_ot_summary%]; width: 20px; height: 20px; float: left"></div>
  <div style="margin-left: 50px">Left and right off-targets not computed</div>

  </td>
  </tr></table>
</div>
</div> [%# end of left-hand div %]

<div class="span3">
<div id="ot_filters_panel">
<form  class="well">
  <table class='table' id="ot_filters_table">
   <thead>
    <tr>
      <th id="crispr_ot_filters_heading" [% UNLESS view_single OR view_paired %]class="muted"[% END %]>Off-Target Filters</th>
    </tr>
   </thead>
   <tbody>
    <tr>
      <td>
        <fieldset name="crispr_ot_filters" [% UNLESS view_paired OR view_single %]disabled[% END %]>
        <button type="button" class="btn btn-mini" id="best_10_percent">Best 10%</button>
        <button type="button" class="btn btn-mini" id="best_25_percent">Best 25%</button>
        <button type="button" class="btn btn-mini" id="best_50_percent">Best 50%</button><br/>
         Maximum number of off-targets with:<br />
         0 mismatch <input type="number" name="0_mismatch" id="0_mismatch" min="1" step="1" style="width: 60px"></input><span id="0_mismatch_no_max" class="help-inline"><small>no max</small></span><br />
         <p class="text-error" id="0_mismatch_input_error" style="display: none;">Enter 1 or more. There is always 1 perfect match to the crispr itself.</p>
         1 mismatch <input type="number" name="1_mismatch" id="1_mismatch" min="0" step="1" style="width: 60px"></input><span id="1_mismatch_no_max" class="help-inline"><small>no max</small></span><br />
         2 mismatch <input type="number" name="2_mismatch" id="2_mismatch" min="0" step="1" style="width: 60px"></input><span id="2_mismatch_no_max" class="help-inline"><small>no max</small></span><br />
         3 mismatch <input type="number" name="3_mismatch" id="3_mismatch" min="0" step="1" style="width: 60px"></input><span id="3_mismatch_no_max" class="help-inline"><small>no max</small></span><br />
         4 mismatch <input type="number" name="4_mismatch" id="4_mismatch" min="0" step="1" style="width: 60px"></input><span id="4_mismatch_no_max" class="help-inline"><small>no max</small></span><br />
         <button type="button" class="btn btn-mini" id="reset_ot_filters">Reset</button>
         <button type="button" class="btn btn-primary btn-small" id="apply_ot_filters">Apply Off-Target Filters</button>
         </fieldset>
         <a href="[% c.uri_for('/crispr_help') _ '#ot_filters' %]" target="_blank" class="pull-right">
          <i class="icon-question-sign"></i>Help
         </a>
      </td>
    </tr>
   </tbody>
  </table>
</form>
</div>
</div> [%# end of right-hand div %]
</div> [%# end of row div %]
</div>

<div class="modal" id="dialog" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
    <h3 id="myModalLabel">Off-Target Computation Status</h3>
  </div>
  <div class="modal-body" id="dialog_content">
  </div>
  <div class="modal-body" id="dialog_success">
    This may take several minutes. Click "Reload Tracks" to refresh the view and show the latest off-target information.
  </div>
</div>

<script type="text/javascript">
  // Functions to show and hide sets of tracks
  function hide_tracks(track_ids){
      track_ids.map(function(id){
          var track = get_track(id);
          if(track){
            $(window)[0].genoverse.removeTrack(track);
          }
      });
  }

  function show_tracks(track_ids){
    // Insert the tracks at position 5, just below genes track
    //(assuming user has not closed gene, variation, protein, sequence tracks..)
      track_ids.map(function(id){
          var track = get_library_track(id);
          if(track){
              $(window)[0].genoverse.addTrack(
                Genoverse.Track.extend($.extend(true, {},track)),5);
          }
      });
  }

  function hide_single (){
      hide_tracks(["Crisprs", "Bookmarked Crisprs"]);
      disable_crispr_filters();
  }

  function show_single (){
      show_tracks(["Crisprs", "Bookmarked Crisprs"]);
      enable_crispr_filters();
  }

  function hide_paired (){
      hide_tracks(["Crispr Pairs", "Bookmarked Crispr Pairs"]);
      disable_crispr_pair_filters();
  }

  function show_paired (){
      show_tracks(["Crispr Pairs","Bookmarked Crispr Pairs"]);
      enable_crispr_pair_filters();
  }

  function hide_designs (){
      hide_tracks(["Designs"]);
  }

  function show_designs (){
      show_tracks(["Designs"]);
  }

  function get_track(id){
    return $(window)[0].genoverse.tracksById[id];
  }

  function get_library_track(id){
    var tracks = $.grep( $(window)[0].genoverse.tracksLibrary, function(n,i){ return n.id== id });
    return tracks[0];
  }

  function enable_crispr_filters(){
      $("[name='crispr_filters']")[0].disabled = false;
      $("#crispr_filters_heading")[0].className = "";
      $("[name='crispr_ot_filters']")[0].disabled = false;
      $("#crispr_ot_filters_heading")[0].className = "";
  }

  function enable_crispr_pair_filters(){
      enable_crispr_filters();
      $("[name='spacer_filters']")[0].disabled = false;
      $("#spacer_filters_heading")[0].className = "";
  }

  function disable_crispr_filters(){
      // only disable them if neither crisprs or pairs
      // are shown
      if ($("#show_single").is(':checked')){
        return;
      }
      if($("#show_paired").is(':checked')){
        return;
      }

      $("[name='crispr_filters']")[0].disabled = true;
      $("#crispr_filters_heading")[0].className = "muted";
      $("[name='crispr_ot_filters']")[0].disabled = true;
      $("#crispr_ot_filters_heading")[0].className = "muted";
  }

  function disable_crispr_pair_filters(){
      $("[name='spacer_filters']")[0].disabled = true;
      $("#spacer_filters_heading")[0].className = "muted";

      disable_crispr_filters();
  }

  function apply_crispr_filters(){
      var crispr_tracks = ['Crisprs','Crispr Pairs'];

      var crispr_filter = $('input[name=crispr_filter]:checked').val();
      var flank_size = $('#flank_size').val();

      // apply to visible tracks and reload them
      crispr_tracks.map(function (track_id){
        var track = get_track(track_id);
        if(track){
          track.urlParams.crispr_filter = crispr_filter;
          track.urlParams.flank_size = flank_size;
          track.reload();
        }
      });

      // apply to library tracks ready for them to be shown
      crispr_tracks.map(function (track_id){
        var track = get_library_track(track_id);
        if(track){
          track.urlParams.crispr_filter = crispr_filter;
          track.urlParams.flank_size = flank_size;
        }
      });
  }

  function apply_ot_filters(){
    var ot_profile = {};
    for (var mismatch_number = 0; mismatch_number < 5; mismatch_number++){
      var input_id = '#' + mismatch_number + '_mismatch';
      var input = $(input_id)[0];
      var value = input.value;
      if (value !== ""){
        ot_profile[mismatch_number] = value;
      }
    }

    var filtered_tracks = ['Crisprs', 'Crispr Pairs'];
    // apply to visible tracks
    filtered_tracks.map(function (track_id){
        var track = get_track(track_id);
        if(track){
            track.ot_profile = ot_profile;
            track.controller.resetImages();
            track.controller.imgContainers.empty();
            track.controller.makeFirstImage();
        }
    });

    // apply to library tracks
    filtered_tracks.map(function (track_id){
        var track = get_library_track(track_id);
        if(track){
            track.ot_profile = ot_profile;
        }
    });
  }

  function reset_ot_filters(){
      for (var mismatch_number = 0; mismatch_number < 5; mismatch_number++){
          var input_id = '#' + mismatch_number + '_mismatch';
          $(input_id).val("");

          var help_span_id = '#' + mismatch_number + '_mismatch_no_max';
          $(help_span_id).show();
      }
      $("#0_mismatch_input_error").hide();

      apply_ot_filters();
  }

  function set_ot_filters(percentile){
      // Distributions caculated using all human crispr off-target counts
      // available on 2014-06-17
      var profiles = { 10: {}, 25: {}, 50: {}, 75: {} };

      // Uses percentiles from WGE::Util::Statistics
      [% FOREACH p IN [10,25,50,75] %]
        [% FOREACH mm IN [0,1,2,3,4] %]
          profiles[ [%p%] ][ [%mm%] ] = [% ot_distributions.$p.$mm %];
        [% END %]
      [% END %]

      var profile = profiles[percentile];

      if(!profile){
        console.log('No off-target profile available for percentile ' + percentile);
        return;
      }

      for (var mismatch_number = 0; mismatch_number < 5; mismatch_number++){
          var input_id = '#' + mismatch_number + '_mismatch';
          $(input_id).val(profile[mismatch_number]);
          var help_span_id = '#' + mismatch_number + '_mismatch_no_max';
          $(help_span_id).hide();
      }
  }

  function apply_spacer_filters(){
      var min = $('#spacer_min')[0].value;
      var max = $('#spacer_max')[0].value;
      var track = get_track('Crispr Pairs');
      if(track){
        if(min === ""){
          track.spacer_min = undefined;
        }
        else{
          track.spacer_min = parseInt(min);
        }

        if(max === ""){
          track.spacer_max = undefined;
        }
        else{
          track.spacer_max = parseInt(max);
        }

        track.controller.resetImages();
        track.controller.imgContainers.empty();
        track.controller.makeFirstImage();
      }

      var library_track = get_library_track('Crispr Pairs');
      if(library_track){
        if(min !== ""){
          track.spacer_min = parseInt(min);
        }
        if(max !== ""){
          track.spacer_max = parseInt(max);
        }
      }
  }

  function reset_spacer_filters(){
    $('#spacer_min').val("");
    $('#spacer_max').val("");
    apply_spacer_filters();
  }

  function apply_MAF_threshold(){
    var track = get_track('MAF_variations');
  
    track.view.thresholdMAF = $('#MAF_threshold').val();
    track.controller.resetImages();
    track.controller.imgContainers.empty();
    track.controller.makeFirstImage();
  }

  function reload_crispr_tracks(){
    var tracks = ['Crisprs', 'Bookmarked Crisprs', 'Crispr Pairs', 'Bookmarked Crispr Pairs'];
    tracks.map(function (track_id){
      var track = get_track(track_id);
      if(track){
        track.reload();
      }
    });
  }

  function find_off_targets(start, end) {
    var params = {
      species: "[% species %]",
      start_coord: start,
      end_coord: end,
      chromosome_number: '[% chromosome %]',
      assembly_id: '[% genome %]',
      all_singles: 1
    };
    var button_text = $(".summary").text();
    var spinner = "[% c.uri_for( '/static/images/spinner-circle.gif' ) %]";
    $(".summary").html('<img alt="Waiting" src="' + spinner + '" height="30" width="30">');
    $.get('api/region_off_target_search', params, function(data){
      console.log(data);
      if(data.error_msg){
        $("#dialog_content").text("Off-target computation failed with error: <br>" + data.error_msg);
        $("#dialog_success").hide();
      }
      else{
        var text = data.pair_count + " pairs and " + data.crispr_count + " individual crisprs submitted for off-target calculation";
        $("#dialog_content").text(text);
        $("#dialog_success").show();
      }
      $("#dialog").modal();
    }).always( function() {
      // remove spinner and restore button text
      $(".summary").html("");
      $(".summary").text(button_text);
    });
  }

  // Add event handlers to filter forms
  $(document).ready( function() {

    // Close selection and refresh tracks when modal is closed
    $("#dialog").on('hidden', function(){
      $(window)[0].genoverse.cancelSelect();
      reload_crispr_tracks();
    });

    $("#ot_filters_panel").draggable();

    // Handle clicks on the show/hide radio inputs
    $("#hide_single").change(function (event){
      hide_single();
    });

    $("#show_single").change(function (event){
      show_single();
    });

    $("#hide_paired").change(function (event){
      hide_paired();
    });

    $("#show_paired").change(function (event){
      show_paired();
    });

    $("#hide_designs").change(function (event){
      hide_designs();
    });

    $("#show_designs").change(function (event){
      show_designs();
    });

    $("#flank_size").keypress(function (event){
      if(event.which == 13){
        apply_crispr_filters();
        // enter key was pressed
        //$("#browse_start")[0].value = $(window)[0].genoverse.start + 200;
        //$("#browse_end")[0].value = $(window)[0].genoverse.end - 200;
        //this.form.submit();
      }
    });

    $('input[name=crispr_filter]').click(function (event){
      apply_crispr_filters();
      //$("#browse_start")[0].value = $(window)[0].genoverse.start + 200;
      //$("#browse_end")[0].value = $(window)[0].genoverse.end - 200;
      //this.form.submit();
    });

    $("#apply_ot_filters").click(function (event){
      apply_ot_filters();
    });

    $("#reset_ot_filters").click(function (event){
      reset_ot_filters();
    });

    $('#apply_spacer_filters').click(function (event){
      apply_spacer_filters();
    });

    $('#reset_spacer_filters').click(function (event){
      reset_spacer_filters();
    });

    $('#apply_MAF_threshold').click(function (event){
      apply_MAF_threshold();
    });

    // show/hide help messages when values are entered in mismatch counts
    $("[id$=mismatch]").bind('keyup mouseup',function (event){
        var help_span_id = "#" + this.id + "_no_max";
        if(this.value !== ""){
            $(help_span_id).hide();
        }
        else{
            $(help_span_id).show();
        }
        if(this.id == '0_mismatch'){
            if(this.value == "0"){
                $('#0_mismatch_input_error').show();
            }
            else{
                $('#0_mismatch_input_error').hide();
            }
        }
    });

    $('#go_to_filters').click(function (event){
      $("html, body").animate({ scrollTop: $(document).height() }, 1000);
    });

    $('#reload_tracks').click(function (event){
      reload_crispr_tracks();
    });

    $('#best_10_percent').click(function(){
        set_ot_filters(10);
        apply_ot_filters();
    });

    $('#best_25_percent').click(function(){
        set_ot_filters(25);
        apply_ot_filters();
    });

    $('#best_50_percent').click(function(){
        set_ot_filters(50);
        apply_ot_filters();
    });
  });

</script>

    <script type="text/javascript" src="[% c.uri_for('/Genoverse/js/genoverse.combined.js', {i => 1})%]"></script>
    <script type="text/javascript" src="[% c.uri_for('/static/js/genoverse_custom_tracks.js', {i => 5})%]"></script>
    <script type="text/javascript" src="[% c.uri_for('/static/js/genoverse_variation_track.js', {i => 3})%]"></script>
    <script>
      var species = '[% species %]';
      ensembl_species = '[% species == "Grch38" ? "Human" : species %]'.toLowerCase();
      var ensembl_url = 'http://[% species == "Human" ? "grch37." : "" %]rest.ensembl.org';

      var genoverseConfig = {
        width     : 1060,
        container : '#genoverse', // Where to inject Genoverse (css/jQuery selector)
        // If no genome supplied, it must have at least chromosomeSize, e.g.:
        // chromosomeSize : 249250621, // chromosome 1, human
        [% USE String(genome) %]
        genome    : '[% String.lower() %]', // see js/genomes/
        chr       : '[% chromosome %]',
        start     : [% browse_start %] - 200,
        end       : [% browse_end %] + 200,
        summary   : find_off_targets, //override the summary method to find off targets
        plugins   : [ 'controlPanelWGE', 'karyotype', 'trackControls', 'resizer', 'fileDrop' ],
        tracks    : [
          Genoverse.Track.Scalebar,
          Genoverse.Track.extend({
            name      : 'Sequence',
            id        : 'Sequence', //need this for tracksById
            url       : ensembl_url + '/sequence/region/' + ensembl_species + '/__CHR__:__START__-__END__?content-type=text/plain',
            model     : Genoverse.Track.Model.Sequence.Ensembl,
            view      : Genoverse.Track.View.Sequence,
            resizable : 'auto',
            100000    : false,
            controls  : 'off',
            unsortable : true
          }),
          Genoverse.Track.Variation.extend({
            id              : 'Variation',
            name            : 'Variation',
            url             : ensembl_url + '/overlap/region/' + ensembl_species + '/__CHR__:__START__-__END__?feature=variation;content-type=application/json',
            resizable       : 'auto',
            model           : Genoverse.Track.Model.extend({ dataRequestLimit : 5000000 }),
            setFeatureColor : function (f) { f.color = '#1B0AB5'; }
          }),
          Genoverse.Track.MAFVariation.extend({
            id              : 'MAF_variations',
            name            : 'MAF_variations',
            url             : "[% c.uri_for('/api/variation_for_region') %]" + "?species="+ensembl_species+"&chr_name=__CHR__&chr_start=__START__&chr_end=__END__",
            resizable       : 'auto',
            model           : Genoverse.Track.Model.extend({ dataRequestLimit : 5000000 }),
            view            : Genoverse.Track.View.FilterMAFVariation.extend({ thresholdMAF : $('#MAF_threshold').val() }),
            setFeatureColor : function (f) { f.color = '#48C402'; }
          }),
          Genoverse.Track.extend({
            name       : 'Protein',
            id         : 'Protein',
            url        : "[% c.uri_for('/api/translation_for_region') %]" + "?species="+ensembl_species+"&chr_name=__CHR__&chr_start=__START__&chr_end=__END__",
            controller : Genoverse.Track.Controller.Protein,
            model      : Genoverse.Track.Model.Protein,
            view       : Genoverse.Track.View.Protein,
            resizable  : 'auto',
            controls   : 'off',
            unsortable : false
          }),
          Genoverse.Track.Genes.extend({
            name   : 'Genes',
            id     : 'Genes',
            //FIXME: should pass species to this template so we do not rely on assembly
            url    : ensembl_url + '/overlap/region/' + ensembl_species + '/__CHR__:__START__-__END__?feature=gene;feature=transcript;feature=exon;feature=cds;content-type=application/json',
            height : 200,
            controls  : 'off',
            unsortable : true,
            info   : 'Ensembl API genes & transcripts, see <a href="http://rest.ensembl.org/" target="_blank">rest.ensembl.org</a> for more details',
            drawFeature: function(transcript, featureContext, labelContext, scale) {
              this.base(transcript, featureContext, labelContext, scale);

                //get correct arrow character
                var s = transcript.strand == -1 ? String.fromCharCode(9668) : String.fromCharCode(9658);
                var textWidth = Math.ceil(featureContext.measureText(s).width) + 1;
                var havana = transcript.logic_name.indexOf('ensembl_havana') === 0;
                featureContext.fillStyle = havana ? '#666666' : '#CCCCCC';
                //loop through all coding regions
                if (transcript.cds && transcript.cds.length) {
                  for (i = 0; i < transcript.cds.length; i++) {
                    cds = transcript.cds[i];

                    var cds_start = transcript.x + (cds.start - transcript.start) * scale;
                    var cds_end   = cds_start + ( (cds.end - cds.start) * scale );
                    var cds_width = Math.max(1, (cds.end - cds.start) * scale);

                    //don't show arrows if the box is too small
                    if ( cds_width < (textWidth+1)*3 )
                      continue;

                    featureContext.fillText(
                      s,
                      cds_start + 1,
                      transcript.y - 2 //no idea why but -2 is what works
                    );

                    featureContext.fillText(
                      s,
                      (cds_end - textWidth) + 1,
                      transcript.y - 2
                    );
                  }
                }
            }
          }),
          Genoverse.Track.extend({
            name      : 'Designs',
            id        : 'Designs',
            url       : "[% c.uri_for('/api/designs_in_region')%]" + "?chr=__CHR__&start=__START__&end=__END__&assembly=[%genome%]" ,
            model     : Genoverse.Track.Model.Transcript.GFF3,
            view      : Genoverse.Track.View.Transcript,
            height    : 50,

            populateMenu : function (feature) {
              var link = "<a href='[%c.uri_for('/view_gibson_design')%]?design_id=" + feature.name
                                + "' target='_blank'><font color='#00FFFF'>Design Report</font></a>";
              var atts = {
                ID     : feature.id,
                url    : link,
                Type   : feature.type,
                Start  : feature.start,
                End    : feature.end,
                Strand : feature.strand
              };
              return atts;
            }
          }),
[% IF c.user %]
          Genoverse.Track.Crisprs.extend({
            id        : 'Bookmarked Crisprs',
            name      : 'Bookmarked Crisprs',
            url       : "[% c.uri_for('/api/crisprs_in_region')%]" + "?chr=__CHR__&start=__START__&end=__END__&assembly=[%genome%]&species_id=[%species%]&design_id=[%design_id%]&bookmarked_only=1" ,
            crispr_report_uri : "[%c.uri_for('/crispr')%]"
          }),
[% END %]
          Genoverse.Track.Crisprs.extend({
            name      : 'Crisprs',
            id        : 'Crisprs',
            url       : "[% c.uri_for('/api/crisprs_in_region')%]" + "?chr=__CHR__&start=__START__&end=__END__&assembly=[%genome%]&species_id=[%species%]&design_id=[%design_id%]" ,
            view      : Genoverse.Track.View.FilterCrisprs,
            crispr_report_uri : "[%c.uri_for('/crispr')%]",
            crispr_id : "[%crispr_id || '' %]",
            urlParams : { crispr_filter: "[%crispr_filter%]", flank_size: "[%flank_size%]"}
          }),

[% IF c.user %]
          Genoverse.Track.CrisprPairs.extend({
            id        : 'Bookmarked Crispr Pairs',
            name      : 'Bookmarked Crispr Pairs',
            url       : "[% c.uri_for('/api/crispr_pairs_in_region')%]" + "?chr=__CHR__&start=__START__&end=__END__&assembly=[%genome%]&species_id=[%species%]&design_id=[%design_id%]&bookmarked_only=1" ,
            pair_report_uri : "[%c.uri_for('/crispr_pair')%]"
          }),
[% END %]
          Genoverse.Track.CrisprPairs.extend({
            name      : 'Crispr Pairs',
            id        : 'Crispr Pairs',
            url       : "[% c.uri_for('/api/crispr_pairs_in_region')%]" + "?chr=__CHR__&start=__START__&end=__END__&assembly=[%genome%]&species_id=[%species%]&design_id=[%design_id%]" ,
            pair_report_uri : "[%c.uri_for('/crispr_pair')%]",
            urlParams : { crispr_filter: "[%crispr_filter%]", flank_size: "[%flank_size%]"},
            view      : Genoverse.Track.View.FilterCrisprPairs,
            // NB: custom settings added here seem to be treated as defaults
            // and get reset by genoverse setMVC function each time user zooms in or out.
            // urlParams does not get reset - you can change this dynamically and the new
            // param values are maintained during zooming
            crispr_pair_id : "[%crispr_pair_id || '' %]"
          }),
          Genoverse.Track.Scaleline
        ]
      };

      document.addEventListener('DOMContentLoaded', function () {
        window.genoverse = new Genoverse(genoverseConfig);

        // code that needs to run AFTER genoverse is loaded and initialized
        window.genoverse.on('afterInit', function (){
          // Change the text of the region summary button
          $(".summary").text("Compute Off-Targets");

          // All tracks are loaded by default on page refresh
          // Hide the ones we don't want to see
          // We are doing it this way because using the hidden attribute
          // on the genoverse tracks caused "call stack size exceeded" error
          if ( $("#hide_single").is(':checked') ) {
            hide_single();
          }

          if ( $("#hide_paired").is(':checked') ) {
            hide_paired();
          }

          if ( $("#hide_designs").is(':checked') ) {
            hide_designs();
          }

          var spinner = "[% c.uri_for( '/static/images/spinner-circle.gif' ) %]";

          // override the 'makeMenu' method in order to add bookmarking buttons
          // and necessary click handlers
          var old_makeMenu = $(window)[0].genoverse.makeMenu;

          $(window)[0].genoverse.makeMenu = function (feature, event, track) {
            // run existing makeMenu code to create popup
            old_makeMenu.apply(this, arguments);

            // append the bookmarking button to the popup
            var settings;
            if(feature.type == 'Crispr'){
              console.log('this is a crispr - adding bookmark button');
              settings = {
                 'id'           : feature.name,
                 'type'         : 'Crispr',
                 'status_uri'   : "[% c.uri_for('/crispr_bookmark_status') %]",
                 'bookmark_uri' : "[% c.uri_for('/bookmark_crispr') %]",
                 'spinner'      : spinner,
                 'bookmark_track' : get_track('Bookmarked Crisprs')
              };
              add_bookmark_button(feature.menuEl,settings);
            }
            else if(feature.type == 'crispr_pair'){
              console.log('this is a crispr pair - adding bookmark button');
              settings = {
                 'id'           : feature.name,
                 'type'         : 'Crispr Pair',
                 'status_uri'   : "[% c.uri_for('/crispr_pair_bookmark_status') %]",
                 'bookmark_uri' : "[% c.uri_for('/bookmark_crispr_pair') %]",
                 'spinner'      : spinner,
                 'bookmark_track' : get_track('Bookmarked Crispr Pairs')
              };
              add_bookmark_button(feature.menuEl,settings);
            }
          };
        });
      });
    </script>


